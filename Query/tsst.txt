const oracledb = require("oracledb");
const DB = require("../config/CheckDB");
oracledb.autoCommit = true;
const callStmt = `BEGIN
CRUDTeacher(:prID, :prName, :prEmail, :prPassword, :prGender, :prBirthday, :prTime, :prRole, :prToken, :prAction, :rs, :cursor);
END;`;

let users = [];
let obj = {};
exports.GetTest = (req, res) => {
  let {
    id,
    name,
    email,
    password,
    gender,
    birthday,
    time,
    role,
    token,
    ACTION,
  } = req.body;
  const bindParams = {
    prID: id,
    prName: "John Doe",
    prEmail: "john@example.com",
    prPassword: "password123",
    prGender: "Male",
    prBirthday: "1990-01-01",
    prTime: "Morning",
    prRole: "Teacher",
    prToken: "abc123",
    prAction: ACTION,
    rs: { dir: oracledb.BIND_OUT, type: oracledb.STRING },
    cursor: { dir: oracledb.BIND_OUT, type: oracledb.CURSOR },
  };
  oracledb.getConnection(DB.DBProperties()).then(async (dbConn) => {
    try {
      let result = await dbConn.execute(callStmt, bindParams);
      console.log("result.outBinds.s:", result.outBinds.rs);
      const resultSet = result.outBinds.cursor;
      let row;

      switch (ACTION) {
        case "All":
          while ((row = await resultSet.getRow())) {
            console.log("row");
            obj = {
              id: row[0],
              name: row[1],
              email: row[2],
              password: row[3],
              gender: row[4],
              birthday: row[5],
              time: row[6],
              role: row[7],
              token: row[8],
            };
            users.push(obj);
          }
          res.send({ message: result.outBinds.rs, data: users });
          break;
        case "GETID":
          query.GetTeacherByID(id, res);
          break;
        case "DELETE":
          res.send({ message: result.outBinds.rs });
          break;
        case "INSERT":
          query.InsertTeacher(req, res);
          break;

        case "UPDATE":
          query.UpdateTeacher(req, res);
          break;

        default:
          res.send({
            message: `SERVER NOT EXIST THIS ACTION`,
          });
          break;
      }

      DB.doRelease(dbConn);
    } catch (error) {
      console.log("ERROR CATCH:", error);
      res.status(404).send({
        MESSAGE: `Query Data Alert`,
        ERROR_DES: error,
      });
    }
  });
};
